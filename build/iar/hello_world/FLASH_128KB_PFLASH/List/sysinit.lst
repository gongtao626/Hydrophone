###############################################################################
#                                                                             #
#                                                       21/Sep/2012  08:53:17 #
# IAR ANSI C/C++ Compiler V6.40.2.23884/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\kk\桌面\kinetis_sc\src\cpu\sys #
#                    init.c                                                   #
#    Command line =  "C:\Documents and Settings\kk\桌面\kinetis_sc\src\cpu\sy #
#                    sinit.c" -D IAR -D TOWER -D TWR_K20D50M -lCN             #
#                    "C:\Documents and Settings\kk\桌面\kinetis_sc\build\iar\ #
#                    hello_world\FLASH_128KB_PFLASH\List\" -lB "C:\Documents  #
#                    and Settings\kk\桌面\kinetis_sc\build\iar\hello_world\FL #
#                    ASH_128KB_PFLASH\List\" -o "C:\Documents and             #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\FLASH_ #
#                    128KB_PFLASH\Obj\" --no_cse --no_unroll --no_inline      #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4                           #
#                    Evaluation\arm\INC\c\DLib_Config_Full.h" -I              #
#                    "C:\Documents and Settings\kk\桌面\kinetis_sc\build\iar\ #
#                    hello_world\..\..\..\src\projects\hello_world\" -I       #
#                    "C:\Documents and Settings\kk\桌面\kinetis_sc\build\iar\ #
#                    hello_world\..\..\..\src\common\" -I "C:\Documents and   #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\cpu\" -I "C:\Documents and                        #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\cpu\headers\" -I "C:\Documents and                #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\uart\" -I "C:\Documents and               #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\mcg\" -I "C:\Documents and                #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\wdog\" -I "C:\Documents and               #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\rcm\" -I "C:\Documents and                #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\rtc\" -I "C:\Documents and                #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\smc\" -I "C:\Documents and                #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\llwu\" -I "C:\Documents and               #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\lptmr\" -I "C:\Documents and              #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\drivers\pmc\" -I "C:\Documents and                #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\..\ #
#                    ..\src\platforms\" -I "C:\Documents and                  #
#                    Settings\kk\桌面\kinetis_sc\build\iar\hello_world\..\"   #
#                    -On --ropi --use_c++_inline -I "C:\Program Files\IAR     #
#                    Systems\Embedded Workbench 6.4                           #
#                    Evaluation\arm\CMSIS\Include\" -D ARM_MATH_CM4           #
#    List file    =  C:\Documents and Settings\kk\桌面\kinetis_sc\build\iar\h #
#                    ello_world\FLASH_128KB_PFLASH\List\sysinit.lst           #
#    Object file  =  C:\Documents and Settings\kk\桌面\kinetis_sc\build\iar\h #
#                    ello_world\FLASH_128KB_PFLASH\Obj\sysinit.o              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\kk\桌面\kinetis_sc\src\cpu\sysinit.c
      1          /*
      2           * File:        sysinit.c
      3           * Purpose:     Kinetis Configuration
      4           *              Initializes processor to a default state
      5           *
      6           * Notes:
      7           *
      8           */
      9          
     10          #include "common.h"
     11          #include "sysinit.h"
     12          #include "uart.h"
     13          #include "mcg.h"
     14          
     15          /********************************************************************/
     16          /* Actual system clock frequency */
     17          int mcg_clk_hz;
     18          int mcg_clk_khz;
     19          int core_clk_khz;
     20          int periph_clk_khz;
     21          int pll_clk_khz;
     22          
     23          int core_clk_mhz;
     24          
     25          /********************************************************************/
     26          void sysinit (void)
     27          {
     28                  /*
     29                   * Enable all of the port clocks. These have to be enabled to configure
     30                   * pin muxing options, so most code will need all of these on anyway.
     31                   */
     32                  SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     33                                | SIM_SCGC5_PORTB_MASK
     34                                | SIM_SCGC5_PORTC_MASK
     35                                | SIM_SCGC5_PORTD_MASK
     36                                | SIM_SCGC5_PORTE_MASK );
     37                  
     38                      // releases hold with ACKISO:  Only has an effect if recovering from VLLS1, VLLS2, or VLLS3
     39              // if ACKISO is set you must clear ackiso before calling pll_init 
     40              //    or pll init hangs waiting for OSC to initialize
     41              // if osc enabled in low power modes - enable it first before ack
     42              // if I/O needs to be maintained without glitches enable outputs and modules first before ack.
     43          //LP 10/25 #ifdef MCU_MK20DZ50        
     44          #ifdef MCU_MK20DZ50 
     45                 // printf(" PMC_REGSC = %x", PMC_REGSC);
     46              if (PMC_REGSC &  PMC_REGSC_ACKISO_MASK)
     47                  PMC_REGSC |= PMC_REGSC_ACKISO_MASK;
     48          #endif
     49              
     50                  
     51          #if defined(NO_PLL_INIT)
     52              // ON REV 1.0 THE SLOW IRC IS NON-FUNCTIONAL AT < 2.05V. THE DEFAULT FREQUENCY WILL VARY FROM PART TO PART IN FEI MODE
     53                    mcg_clk_hz = 21000000; //FEI mode
     54          #else 
     55                 /* Ramp up the system clock */
     56                 /* Set the system dividers */
     57                 /* NOTE: The PLL init will not configure the system clock dividers,
     58                  * so they must be configured appropriately before calling the PLL
     59                  * init function to ensure that clocks remain in valid ranges.
     60                  */  
     61                  SIM_CLKDIV1 = ( 0
     62                                  | SIM_CLKDIV1_OUTDIV1(0)
     63                                  | SIM_CLKDIV1_OUTDIV2(0)
     64                                  | SIM_CLKDIV1_OUTDIV4(1) );
     65              // releases hold with ACKISO:  Only has an effect if recovering from VLLS1, VLLS2, or VLLS3
     66              // if ACKISO is set you must clear ackiso before calling pll_init 
     67              //    or pll init hangs waiting for OSC to initialize
     68              // if osc enabled in low power modes - enable it first before ack
     69              // if I/O needs to be maintained without glitches enable outputs and modules first before ack.
     70              if (PMC_REGSC &  PMC_REGSC_ACKISO_MASK)
     71                  PMC_REGSC |= PMC_REGSC_ACKISO_MASK;
     72          
     73                 /* Initialize PLL */
     74                 /* PLL will be the source for MCG CLKOUT so the core, system, and flash clocks are derived from it */ 
     75                 mcg_clk_hz = pll_init(CLK0_FREQ_HZ,  /* CLKIN0 frequency */
     76                                       LOW_POWER,     /* Set the oscillator for low power mode */
     77                                       CLK0_TYPE,     /* Crystal or canned oscillator clock input */
     78                                       PLL0_PRDIV,    /* PLL predivider value */
     79                                       PLL0_VDIV,     /* PLL multiplier */
     80                                       MCGOUT);       /* Use the output from this PLL as the MCGOUT */
     81          
     82                 /* Check the value returned from pll_init() to make sure there wasn't an error */
     83                 if (mcg_clk_hz < 0x100)
     84                   while(1);
     85          #endif
     86          
     87          	/*
     88                   * Use the value obtained from the pll_init function to define variables
     89          	 * for the core clock in kHz and also the peripheral clock. These
     90          	 * variables can be used by other functions that need awareness of the
     91          	 * system frequency.
     92          	 */
     93                  mcg_clk_khz = mcg_clk_hz / 1000;
     94          	core_clk_khz = mcg_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> 28)+ 1);
     95            	periph_clk_khz = mcg_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24)+ 1);
     96                  
     97            	/* For debugging purposes, enable the trace clock and/or FB_CLK so that
     98            	 * we'll be able to monitor clocks and know the PLL is at the frequency
     99            	 * that we expect.
    100            	 */
    101          	//trace_clk_init();
    102          #ifndef NO_CLKOUT_SUPPORT
    103            	/* Enable the pins for the clock out pins */
    104          	trace_clk_init();
    105            	fb_clk_init();
    106          #endif
    107                  
    108          #ifndef CONSOLE_SUPPORT
    109            	/* Enable the pins for the selected UART */
    110                   if (TERM_PORT == UART0_BASE_PTR)
    111                   {
    112          #ifdef TWR_K20DX256
    113                     /* Enable the UART0_TXD function on PTB17 */
    114                      PORTB_PCR17 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin
    115          
    116                      /* Enable the UART0_RXD function on PTB16 */
    117                      PORTB_PCR16 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin    
    118          #elif 0//P0_DC_64LQFP
    119                     /* Enable the UART0_TXD function on PTA2*/
    120                      PORTA_PCR2 = PORT_PCR_MUX(0x2); // UART is alt2 function for this pin
    121          
    122                      /* Enable the UART0_RXD function on PTA1 */
    123                      PORTA_PCR1 = PORT_PCR_MUX(0x2); // UART is alt2 function for this pin            
    124          #else
    125                      /* Enable the UART0_TXD function on PTD6 */
    126                      PORTD_PCR6 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin
    127          
    128                      /* Enable the UART0_RXD function on PTD7 */
    129                      PORTD_PCR7 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin
    130          #endif
    131                   }
    132          
    133                   if (TERM_PORT == UART1_BASE_PTR)
    134            	 {
    135                     /* Enable the UART0_TXD function on PTE0 (1) */
    136                      PORTE_PCR0 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin
    137          
    138                      /* Enable the UART0_RXD function on PTE1 (2) */
    139                      PORTE_PCR1 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin   
    140            	}
    141          
    142            	if (TERM_PORT == UART2_BASE_PTR)
    143            	{
    144                           /* Enable the UART2_TXD function on PTD3 */
    145            		PORTD_PCR3 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin
    146          
    147            		/* Enable the UART2_RXD function on PTD2 */
    148            		PORTD_PCR2 = PORT_PCR_MUX(0x3); // UART is alt3 function for this pin
    149            	}
    150                  
    151            	/* UART0 and UART1 are clocked from the core clock, but all other UARTs are
    152                   * clocked from the peripheral clock. So we have to determine which clock
    153                   * to send to the uart_init function.
    154                   */
    155                  if ((TERM_PORT == UART0_BASE_PTR) | (TERM_PORT == UART1_BASE_PTR))
    156                      uart_init (TERM_PORT, core_clk_khz, TERMINAL_BAUD);
    157                  else
    158            	    uart_init (TERM_PORT, periph_clk_khz, TERMINAL_BAUD);
    159          #endif
    160          }
    161          /********************************************************************/
    162          void trace_clk_init(void)
    163          {
    164          	/* Set the trace clock to the core clock frequency */
    165          	SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;
    166          
    167          	/* Enable the TRACE_CLKOUT pin function on PTA6 (alt7 function) */
    168          	PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
    169          }
    170          /********************************************************************/
    171          void fb_clk_init(void)
    172          {
    173           	/* Enable the FB_CLKOUT function on PTC3 (alt5 function) */
    174                  SIM_SOPT2 &= ~SIM_SOPT2_CLKOUTSEL_MASK; // clear clkoout field
    175                  SIM_SOPT2 |= SIM_SOPT2_CLKOUTSEL(2);    // select flash clock
    176          	PORTC_PCR3 = ( PORT_PCR_MUX(0x5) | PORT_PCR_DSE_MASK );
    177          }
    178          /********************************************************************/

Errors: 1
Warnings: none
